pipelines:
  - name: repository_create
    configuration:
      retentionPolicy:
        maxAgeDays: 30
        minRuns: 10
      integrations:
        - name: jpd_token
      environmentVariables:
        readOnly:
          repoType:
            default: "local"
            description: "Select the Repository Type"
            values:
              - local
              - remote
              - virtual
              - federated
          packageType:
            default: "alpine"
            description: "Select the Package Type"
            values:
              - alpine
              - bower
              - cargo
              - chef
              - cocoapods
              - conan
              - conda
              - cran
              - debian
              - docker
              - gems
              - generic
              - gitlfs
              - go
              - gradle
              - helm
              - helmoci
              - huggingfaceml
              - ivy
              - maven
              - npm
              - nuget
              - oci
              - opkg
              - php
              - pub
              - puppet
              - pypi
              - rpm
              - sbt
              - swift
              - terraform-modules
              - vagrant
          repoName: ""
    steps:
    - name: setup_configuration
      type: Bash
      configuration:
        integrations:
          - name: jpd_token
        inputResources:
          - name: JFrog_Automation_Repo
            trigger: false
      execution:
        onStart:
          - |
            echo "Installing Packages...."
            sudo apt-get install jq
            sudo curl -fL https://install-cli.jfrog.io | sh
            jq --version
            jf --version
            python3 --version
        onExecute:
          - jf c add psapac --url="https://psapac.jfrog.io/" --access-token="${int_jpd_token_auto_admin}" --interactive=false
          - jf c show
          - jf rt ping
          - cd ./dependencyState/resources/infy_repository_data_automations/create_resources/
          - chmox +x createRepos.sh ; ./createRepos.sh
        onComplete:
          - echo "Completed creating ${repo_type} repository with package type - ${packageType} and repo name - ${repoName}"
